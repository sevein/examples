// Code generated by goa v3.14.0, DO NOT EDIT.
//
// chatter gRPC server types
//
// Command:
// $ goa gen goa.design/examples/streaming/design

package server

import (
	chatter "goa.design/examples/streaming/gen/chatter"
	chatterviews "goa.design/examples/streaming/gen/chatter/views"
	chatterpb "goa.design/examples/streaming/gen/grpc/chatter/pb"
)

// NewLoginPayload builds the payload of the "login" endpoint of the "chatter"
// service from the gRPC request type.
func NewLoginPayload(user string, password string) *chatter.LoginPayload {
	v := &chatter.LoginPayload{}
	v.User = user
	v.Password = password
	return v
}

// NewProtoLoginResponse builds the gRPC response type from the result of the
// "login" endpoint of the "chatter" service.
func NewProtoLoginResponse(result string) *chatterpb.LoginResponse {
	message := &chatterpb.LoginResponse{}
	message.Field = result
	return message
}

// NewEchoerPayload builds the payload of the "echoer" endpoint of the
// "chatter" service from the gRPC request type.
func NewEchoerPayload(token string) *chatter.EchoerPayload {
	v := &chatter.EchoerPayload{}
	v.Token = token
	return v
}

// NewProtoEchoerResponse builds the gRPC response type from the result of the
// "echoer" endpoint of the "chatter" service.
func NewProtoEchoerResponse(result string) *chatterpb.EchoerResponse {
	message := &chatterpb.EchoerResponse{}
	message.Field = result
	return message
}

func NewEchoerStreamingRequestEchoerStreamingRequest(v *chatterpb.EchoerStreamingRequest) string {
	spayload := v.Field
	return spayload
}

// NewListenerPayload builds the payload of the "listener" endpoint of the
// "chatter" service from the gRPC request type.
func NewListenerPayload(token string) *chatter.ListenerPayload {
	v := &chatter.ListenerPayload{}
	v.Token = token
	return v
}

// NewProtoListenerResponse builds the gRPC response type from the result of
// the "listener" endpoint of the "chatter" service.
func NewProtoListenerResponse() *chatterpb.ListenerResponse {
	message := &chatterpb.ListenerResponse{}
	return message
}

func NewListenerStreamingRequestListenerStreamingRequest(v *chatterpb.ListenerStreamingRequest) string {
	spayload := v.Field
	return spayload
}

// NewSummaryPayload builds the payload of the "summary" endpoint of the
// "chatter" service from the gRPC request type.
func NewSummaryPayload(token string) *chatter.SummaryPayload {
	v := &chatter.SummaryPayload{}
	v.Token = token
	return v
}

// NewProtoChatSummaryCollection builds the gRPC response type from the result
// of the "summary" endpoint of the "chatter" service.
func NewProtoChatSummaryCollection(result chatterviews.ChatSummaryCollectionView) *chatterpb.ChatSummaryCollection {
	message := &chatterpb.ChatSummaryCollection{}
	message.Field = make([]*chatterpb.ChatSummary, len(result))
	for i, val := range result {
		message.Field[i] = &chatterpb.ChatSummary{
			Message_: *val.Message,
			SentAt:   *val.SentAt,
		}
		if val.Length != nil {
			length := int32(*val.Length)
			message.Field[i].Length = &length
		}
	}
	return message
}

func NewProtoChatSummaryCollectionViewChatSummaryCollection(vresult chatterviews.ChatSummaryCollectionView) *chatterpb.ChatSummaryCollection {
	v := &chatterpb.ChatSummaryCollection{}
	v.Field = make([]*chatterpb.ChatSummary, len(vresult))
	for i, val := range vresult {
		v.Field[i] = &chatterpb.ChatSummary{
			Message_: *val.Message,
			SentAt:   *val.SentAt,
		}
		if val.Length != nil {
			length := int32(*val.Length)
			v.Field[i].Length = &length
		}
	}
	return v
}

func NewSummaryStreamingRequestSummaryStreamingRequest(v *chatterpb.SummaryStreamingRequest) string {
	spayload := v.Field
	return spayload
}

// NewSubscribePayload builds the payload of the "subscribe" endpoint of the
// "chatter" service from the gRPC request type.
func NewSubscribePayload(token string) *chatter.SubscribePayload {
	v := &chatter.SubscribePayload{}
	v.Token = token
	return v
}

// NewProtoSubscribeResponse builds the gRPC response type from the result of
// the "subscribe" endpoint of the "chatter" service.
func NewProtoSubscribeResponse(result *chatter.Event) *chatterpb.SubscribeResponse {
	message := &chatterpb.SubscribeResponse{
		Message_: result.Message,
		Action:   result.Action,
		AddedAt:  result.AddedAt,
	}
	if result.Details != nil {
		switch src := result.Details.(type) {
		case *chatter.PackageCreatedEvent:
			message.Details = &chatterpb.SubscribeResponse_PackageCreated{PackageCreated: svcChatterPackageCreatedEventToChatterpbPackageCreatedEvent(src)}
		case *chatter.PackageDeletedEvent:
			message.Details = &chatterpb.SubscribeResponse_PackageDeleted{PackageDeleted: svcChatterPackageDeletedEventToChatterpbPackageDeletedEvent(src)}
		case *chatter.PackageUpdatedEvent:
			message.Details = &chatterpb.SubscribeResponse_PackageUpdated{PackageUpdated: svcChatterPackageUpdatedEventToChatterpbPackageUpdatedEvent(src)}
		}
	}
	return message
}

func NewProtoEventSubscribeResponse(result *chatter.Event) *chatterpb.SubscribeResponse {
	v := &chatterpb.SubscribeResponse{
		Message_: result.Message,
		Action:   result.Action,
		AddedAt:  result.AddedAt,
	}
	if result.Details != nil {
		switch src := result.Details.(type) {
		case *chatter.PackageCreatedEvent:
			v.Details = &chatterpb.SubscribeResponse_PackageCreated{PackageCreated: svcChatterPackageCreatedEventToChatterpbPackageCreatedEvent(src)}
		case *chatter.PackageDeletedEvent:
			v.Details = &chatterpb.SubscribeResponse_PackageDeleted{PackageDeleted: svcChatterPackageDeletedEventToChatterpbPackageDeletedEvent(src)}
		case *chatter.PackageUpdatedEvent:
			v.Details = &chatterpb.SubscribeResponse_PackageUpdated{PackageUpdated: svcChatterPackageUpdatedEventToChatterpbPackageUpdatedEvent(src)}
		}
	}
	return v
}

// NewHistoryPayload builds the payload of the "history" endpoint of the
// "chatter" service from the gRPC request type.
func NewHistoryPayload(view *string, token string) *chatter.HistoryPayload {
	v := &chatter.HistoryPayload{}
	v.View = view
	v.Token = token
	return v
}

// NewProtoHistoryResponse builds the gRPC response type from the result of the
// "history" endpoint of the "chatter" service.
func NewProtoHistoryResponse(result *chatterviews.ChatSummaryView) *chatterpb.HistoryResponse {
	message := &chatterpb.HistoryResponse{
		Message_: *result.Message,
		SentAt:   *result.SentAt,
	}
	if result.Length != nil {
		length := int32(*result.Length)
		message.Length = &length
	}
	return message
}

func NewProtoChatSummaryViewHistoryResponse(vresult *chatterviews.ChatSummaryView) *chatterpb.HistoryResponse {
	v := &chatterpb.HistoryResponse{
		Message_: *vresult.Message,
		SentAt:   *vresult.SentAt,
	}
	if vresult.Length != nil {
		length := int32(*vresult.Length)
		v.Length = &length
	}
	return v
}

// svcChatterPackageCreatedEventToChatterpbPackageCreatedEvent builds a value
// of type *chatterpb.PackageCreatedEvent from a value of type
// *chatter.PackageCreatedEvent.
func svcChatterPackageCreatedEventToChatterpbPackageCreatedEvent(v *chatter.PackageCreatedEvent) *chatterpb.PackageCreatedEvent {
	res := &chatterpb.PackageCreatedEvent{
		Id: int32(v.ID),
	}
	if v.Item != nil {
		res.Item = svcChatterItemToChatterpbItem(v.Item)
	}

	return res
}

// svcChatterItemToChatterpbItem builds a value of type *chatterpb.Item from a
// value of type *chatter.Item.
func svcChatterItemToChatterpbItem(v *chatter.Item) *chatterpb.Item {
	if v == nil {
		return nil
	}
	res := &chatterpb.Item{
		Description: v.Description,
	}

	return res
}

// svcChatterPackageDeletedEventToChatterpbPackageDeletedEvent builds a value
// of type *chatterpb.PackageDeletedEvent from a value of type
// *chatter.PackageDeletedEvent.
func svcChatterPackageDeletedEventToChatterpbPackageDeletedEvent(v *chatter.PackageDeletedEvent) *chatterpb.PackageDeletedEvent {
	res := &chatterpb.PackageDeletedEvent{
		Id: int32(v.ID),
	}
	if v.ItemDeleted != nil {
		res.ItemDeleted = svcChatterItemToChatterpbItem(v.ItemDeleted)
	}

	return res
}

// svcChatterPackageUpdatedEventToChatterpbPackageUpdatedEvent builds a value
// of type *chatterpb.PackageUpdatedEvent from a value of type
// *chatter.PackageUpdatedEvent.
func svcChatterPackageUpdatedEventToChatterpbPackageUpdatedEvent(v *chatter.PackageUpdatedEvent) *chatterpb.PackageUpdatedEvent {
	res := &chatterpb.PackageUpdatedEvent{
		Id: int32(v.ID),
	}
	if v.Item != nil {
		res.Item = svcChatterItemToChatterpbItem(v.Item)
	}

	return res
}

// protobufChatterpbPackageCreatedEventToChatterPackageCreatedEvent builds a
// value of type *chatter.PackageCreatedEvent from a value of type
// *chatterpb.PackageCreatedEvent.
func protobufChatterpbPackageCreatedEventToChatterPackageCreatedEvent(v *chatterpb.PackageCreatedEvent) *chatter.PackageCreatedEvent {
	res := &chatter.PackageCreatedEvent{
		ID: int(v.Id),
	}
	if v.Item != nil {
		res.Item = protobufChatterpbItemToChatterItem(v.Item)
	}

	return res
}

// protobufChatterpbItemToChatterItem builds a value of type *chatter.Item from
// a value of type *chatterpb.Item.
func protobufChatterpbItemToChatterItem(v *chatterpb.Item) *chatter.Item {
	if v == nil {
		return nil
	}
	res := &chatter.Item{
		Description: v.Description,
	}

	return res
}

// protobufChatterpbPackageDeletedEventToChatterPackageDeletedEvent builds a
// value of type *chatter.PackageDeletedEvent from a value of type
// *chatterpb.PackageDeletedEvent.
func protobufChatterpbPackageDeletedEventToChatterPackageDeletedEvent(v *chatterpb.PackageDeletedEvent) *chatter.PackageDeletedEvent {
	res := &chatter.PackageDeletedEvent{
		ID: int(v.Id),
	}
	if v.ItemDeleted != nil {
		res.ItemDeleted = protobufChatterpbItemToChatterItem(v.ItemDeleted)
	}

	return res
}

// protobufChatterpbPackageUpdatedEventToChatterPackageUpdatedEvent builds a
// value of type *chatter.PackageUpdatedEvent from a value of type
// *chatterpb.PackageUpdatedEvent.
func protobufChatterpbPackageUpdatedEventToChatterPackageUpdatedEvent(v *chatterpb.PackageUpdatedEvent) *chatter.PackageUpdatedEvent {
	res := &chatter.PackageUpdatedEvent{
		ID: int(v.Id),
	}
	if v.Item != nil {
		res.Item = protobufChatterpbItemToChatterItem(v.Item)
	}

	return res
}
